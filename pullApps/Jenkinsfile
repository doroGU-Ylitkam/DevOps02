pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO_APP1 = 'vicryabenko/devops02-app01'
        DOCKER_HUB_REPO_APP2 = 'vicryabenko/devops02-app02'
        CONFIG_REPO_URL = 'https://github.com/doroGU-Ylitkam/DevOps02-config-.git'

        APP1_CONFIG = 'app1-config.yaml'
        APP2_CONFIG = 'app2-config.yaml'
    }

    stages {
        stage('Checkout Configs') {
            steps {
                echo 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...'
                git url: env.CONFIG_REPO_URL, branch: 'main'
            }
        }

        stage('Pull Docker Images') {
            steps {
                echo 'üê≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–∑–æ–≤ –∏–∑ Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${env.DOCKER_HUB_REPO_APP1}:latest").pull()
                        docker.image("${env.DOCKER_HUB_REPO_APP2}:latest").pull()
                    }
                }
            }
        }

        stage('Run Containers') {
            steps {
                echo 'üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏...'
                script {
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                    sh 'docker stop app1 || true && docker rm app1 || true'
                    sh 'docker stop app2 || true && docker rm app2 || true'
        
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–≤
                    sh "docker run -d --name app1 -v ${WORKSPACE}/${env.APP1_CONFIG}:/app/config.yaml -p 8081:8081 ${env.DOCKER_HUB_REPO_APP1}:latest"
                    sh "docker run -d --name app2 -v ${WORKSPACE}/${env.APP2_CONFIG}:/app/config.yaml -p 8082:8082 ${env.DOCKER_HUB_REPO_APP2}:latest"
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
                    sh 'docker ps'
                }
            }
        }
    }
}
