pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'vicryabenko/devops02'
        APP_PORT = '8081'
        APP_REPO_URL = 'https://github.com/foxolave/ServiceForStudy01.git'
        DOCKERFILE_PATH = 'app1-pipeline/Dockerfile'
    }
    
    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'üì• Cloning original application repository...'
                git url: env.APP_REPO_URL, branch: 'main'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ Running tests with Maven...'
                sh 'chmod +x mvnw'
                sh './mvnw test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build JAR') {
            steps {
                echo 'üî® Building JAR artifact...'
                sh './mvnw clean package -DskipTests'
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        stage('Prepare Docker') {
            steps {
                echo 'üê≥ Preparing Docker environment...'
                // –ö–æ–ø–∏—Ä—É–µ–º Dockerfile –∏–∑ –≤–∞—à–µ–≥–æ CI-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                              userRemoteConfigs: [[url: 'https://github.com/doroGU-Ylitkam/DevOps02.git']]])
                    sh "cp ${env.DOCKERFILE_PATH} ."
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    def imageName = "${env.DOCKER_HUB_REPO}:${env.BUILD_ID}"
                    
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        // –°–±–æ—Ä–∫–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        def customImage = docker.build(imageName, 
                            "--build-arg APP_PORT=${env.APP_PORT} .")
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ latest
                        docker.image(imageName).tag('latest')
                        
                        // –ü—É—à–∏–º –æ–±–∞ —Ç–µ–≥–∞
                        customImage.push()
                        docker.image(imageName).push('latest')
                    }
                }
            }
        }
    }
}
